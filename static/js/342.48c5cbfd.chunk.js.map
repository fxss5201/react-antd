{"version":3,"file":"static/js/342.48c5cbfd.chunk.js","mappings":"+PA8DA,IAtDwB,SAAHA,GAA0D,IAADC,EAAAD,EAAnDE,KAAAA,OAAI,IAAAD,EAAC,aAAYA,EAAAE,EAAAH,EAAEI,SAAAA,OAAQ,IAAAD,EAAC,GAAEA,EAAAE,EAAAL,EAAEM,UAAAA,OAAS,IAAAD,EAAC,GAAEA,EACrEE,EAAoCC,EAAAA,GAAAA,aAAoBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAApCG,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAkCxB,OACEG,EAAAA,EAAAA,MAAA,OAAKZ,UAAWa,IAAW,WAAYb,GAAWF,SAAA,CAC/CQ,GACDM,EAAAA,EAAAA,MAAA,OAAKZ,UAAU,2CAA0CF,SAAA,EACvDgB,EAAAA,EAAAA,KAAA,QAAMd,UAAU,qBAAoBF,SAAEF,KACtCkB,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,2BAAMlB,UACnBgB,EAAAA,EAAAA,KAACG,EAAAA,gBAAe,CAACC,KAAMpB,EAAUqB,OAvC1B,SAACD,EAAME,GACfF,EAODE,GACFT,GAAU,GACVN,EAAWgB,QAAQ,CACjBC,QAAS,iCACTC,SAAU,EACVC,QAAS,WACPb,GAAU,EACZ,MAGFA,GAAU,GACVN,EAAWoB,MAAM,CACfH,QAAS,iCACTC,SAAU,KAnBZlB,EAAWqB,QAAQ,CACjBJ,QAAS,mDACTC,SAAU,GAoBhB,EAewDzB,UAC9CgB,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CAACC,KAAK,QAAQ5B,UAAU,aAAa6B,KAAMnB,GAASI,EAAAA,EAAAA,KAACgB,EAAAA,EAAa,KAAMhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAY,cAIlGjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAiB,CAACC,SAAUrC,EAAMsC,iBAAe,EAACC,MAAOC,EAAAA,EAAaC,YAlBvD,CAClBC,aAAc,MACdC,SAAU,OACVC,WAAY,OACZC,OAAQ,GAc0F3C,SAC7FA,MAIT,C,wNCJA,EAnDiB,WACf,IAAAG,EAAoCC,EAAAA,GAAAA,aAAoBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAAgCC,EAAAA,EAAAA,UAAS,QAAOC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAzCmC,EAAQjC,EAAA,GAAEkC,EAAWlC,EAAA,GAC5BmC,GAA4BpC,EAAAA,EAAAA,WAAS,GAAMqC,GAAAzC,EAAAA,EAAAA,GAAAwC,EAAA,GAApClC,EAAMmC,EAAA,GAAElC,EAASkC,EAAA,GA2BxB,OACEjC,EAAAA,EAAAA,MAAA,OAAAd,SAAA,CACGQ,GACDM,EAAAA,EAAAA,MAACkC,EAAAA,EAAAA,MAAW,CAACC,SAAO,EAAAjD,SAAA,EAClBgB,EAAAA,EAAAA,KAACgC,EAAAA,EAAK,CACJX,MAAO,CACLa,MAAO,qBAETC,aAAcP,EACdQ,SAAU,SAACC,GAAC,OAAKR,EAAYQ,EAAEC,OAAOC,MAAM,KAE9CvC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,MAAM,eAAIlB,UACjBgB,EAAAA,EAAAA,KAACG,EAAAA,gBAAe,CAACC,KAAMwB,EAAUvB,OAtC1B,SAACD,EAAME,GACfF,EAODE,GACFT,GAAU,GACVN,EAAWgB,QAAQ,CACjBC,QAAS,iCACTC,SAAU,EACVC,QAAS,WACPb,GAAU,EACZ,MAGFA,GAAU,GACVN,EAAWoB,MAAM,CACfH,QAAS,iCACTC,SAAU,KAnBZlB,EAAWqB,QAAQ,CACjBJ,QAAS,yDACTC,SAAU,GAoBhB,EAcwDzB,UAC9CgB,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CAAC3B,UAAU,aAAa6B,KAAMnB,GAASI,EAAAA,EAAAA,KAACgB,EAAAA,EAAa,KAAMhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAY,eAM3F,EChDQuB,EAAaC,EAAAA,EAAAA,SACbC,EAAUC,EAAAA,EAAAA,MAqBlB,EAnBiB,WACf,IACQC,EADUJ,IAAVK,MACAD,aACR,OACE9C,EAAAA,EAAAA,MAAA,OAAAd,SAAA,EACEgB,EAAAA,EAAAA,KAAC0C,EAAK,CAAA1D,UAACgB,EAAAA,EAAAA,KAAA,KAAG8C,KAAK,kDAAkDR,OAAO,SAASS,IAAI,aAAa1B,MAAO,CAAC2B,MAAOJ,GAAc5D,SAAC,+BAChIgB,EAAAA,EAAAA,KAAC0C,EAAK,CAACO,MAAO,EAAG5B,MAAO,CAAE6B,UAAW,SAAUlE,SAAC,wBAChDgB,EAAAA,EAAAA,KAACmD,EAAAA,EAAe,CAACrE,KAAK,KAAIE,SACvB,gDAEHgB,EAAAA,EAAAA,KAAC0C,EAAK,CAACO,MAAO,EAAG5B,MAAO,CAAE6B,UAAW,SAAUlE,SAAC,wBAChDgB,EAAAA,EAAAA,KAACoD,EAAQ,KACTpD,EAAAA,EAAAA,KAAC0C,EAAK,CAACO,MAAO,EAAG5B,MAAO,CAAE6B,UAAW,SAAUlE,SAAC,oCAChDgB,EAAAA,EAAAA,KAACmD,EAAAA,EAAe,CAACrE,KAAK,MAAKE,SCtBR,0jDD2BzB,C","sources":["components/CodeHighlighter.jsx","pages/pageRecommendation/pageCopy/CopyDemo.jsx","pages/pageRecommendation/pageCopy/PageCopy.jsx","pages/pageRecommendation/pageCopy/Codes.js"],"sourcesContent":["import { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Button, message, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nconst CodeHighlighter = ({ lang='javascript', children='', className='' }) => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '缺乏待复制内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  const customStyle = {\n    borderRadius: '6px',\n    fontSize: '14px',\n    paddingTop: '22px',\n    margin: 0,\n  }\n\n  return (\n    <div className={classNames('relative', className)}>\n      {contextHolder}\n      <div className='absolute right-1 top-1 flex items-center'>\n        <span className='text-zinc-400 mr-3'>{lang}</span>\n        <Tooltip title=\"复制代码\">\n          <CopyToClipboard text={children} onCopy={onCopy}>\n            <Button size=\"small\" className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </div>\n      <SyntaxHighlighter language={lang} showLineNumbers style={vscDarkPlus} customStyle={customStyle}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeHighlighter;\n","import { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { message, Button, Input, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\n\nconst CopyDemo = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [inputStr, setInputStr] = useState('demo');\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '请输入待复制内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  return (\n    <div>\n      {contextHolder}\n      <Input.Group compact>\n        <Input\n          style={{\n            width: 'calc(100% - 32px)',\n          }}\n          defaultValue={inputStr}\n          onChange={(e) => setInputStr(e.target.value)}\n        />\n        <Tooltip title=\"复制\">\n          <CopyToClipboard text={inputStr} onCopy={onCopy}>\n            <Button className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default CopyDemo;\n","import React from 'react';\nimport CodeHighlighter from '../../../components/CodeHighlighter';\nimport { Typography, theme } from 'antd';\nimport CopyDemo from './CopyDemo';\nimport { copyDemoCode } from './Codes';\n\nconst { useToken } = theme;\nconst { Title } = Typography;\n\nconst PageCopy = () => {\n  const { token } = useToken();\n  const { colorPrimary } = token;\n  return (\n    <div>\n      <Title><a href=\"https://github.com/nkbt/react-copy-to-clipboard\" target=\"_blank\" rel=\"noreferrer\" style={{color: colorPrimary}}>react-copy-to-clipboard</a></Title>\n      <Title level={2} style={{ marginTop: '0.5em' }}>安装：</Title>\n      <CodeHighlighter lang='sh'>\n        {'npm install --save react-copy-to-clipboard'}\n      </CodeHighlighter>\n      <Title level={2} style={{ marginTop: '0.5em' }}>例子：</Title>\n      <CopyDemo></CopyDemo>\n      <Title level={2} style={{ marginTop: '0.5em' }}>例子代码：</Title>\n      <CodeHighlighter lang='jsx'>\n        {copyDemoCode}\n      </CodeHighlighter>\n    </div>\n  )\n};\nexport default PageCopy;\n","export const copyDemoCode = `import { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { message, Button, Input, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\n\nconst CopyDemo = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [inputStr, setInputStr] = useState('demo');\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '请输入内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  return (\n    <div>\n      {contextHolder}\n      <Input.Group compact>\n        <Input\n          style={{\n            width: 'calc(100% - 32px)',\n          }}\n          defaultValue={inputStr}\n          onChange={(e) => setInputStr(e.target.value)}\n        />\n        <Tooltip title=\"复制\">\n          <CopyToClipboard text={inputStr} onCopy={onCopy}>\n            <Button className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default CopyDemo;`\n"],"names":["_ref","_ref$lang","lang","_ref$children","children","_ref$className","className","_message$useMessage","message","_message$useMessage2","_slicedToArray","messageApi","contextHolder","_useState","useState","_useState2","copied","setCopied","_jsxs","classNames","_jsx","Tooltip","title","CopyToClipboard","text","onCopy","result","success","content","duration","onClose","error","warning","Button","size","icon","CheckOutlined","CopyOutlined","SyntaxHighlighter","language","showLineNumbers","style","vscDarkPlus","customStyle","borderRadius","fontSize","paddingTop","margin","inputStr","setInputStr","_useState3","_useState4","Input","compact","width","defaultValue","onChange","e","target","value","useToken","theme","Title","Typography","colorPrimary","token","href","rel","color","level","marginTop","CodeHighlighter","CopyDemo"],"sourceRoot":""}