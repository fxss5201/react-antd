{"version":3,"file":"static/js/415.10f2c00d.chunk.js","mappings":"2OA6DA,IAtDwB,SAAH,GAAgD,IAAD,IAAzCA,KAAAA,OAAI,MAAG,aAAY,MAAEC,SAAAA,OAAQ,MAAG,GAAE,EAC3D,EAAoCC,EAAAA,GAAAA,aAAoB,eAAjDC,EAAU,KAAEC,EAAa,KAChC,GAA4BC,EAAAA,EAAAA,WAAS,GAAM,eAApCC,EAAM,KAAEC,EAAS,KAkCxB,OACE,iBAAKC,UAAU,WAAU,UACtBJ,GACD,iBAAKI,UAAU,2CAA0C,WACvD,iBAAMA,UAAU,qBAAoB,SAAER,KACtC,SAAC,IAAO,CAACS,MAAM,2BAAM,UACnB,SAAC,EAAAC,gBAAe,CAACC,KAAMV,EAAUW,OAvC1B,SAACD,EAAME,GACfF,EAODE,GACFN,GAAU,GACVJ,EAAWW,QAAQ,CACjBC,QAAS,iCACTC,SAAU,EACVC,QAAS,WACPV,GAAU,EACZ,MAGFA,GAAU,GACVJ,EAAWe,MAAM,CACfH,QAAS,iCACTC,SAAU,KAnBZb,EAAWgB,QAAQ,CACjBJ,QAAS,mDACTC,SAAU,GAoBhB,EAewD,UAC9C,SAAC,KAAM,CAACI,KAAK,QAAQZ,UAAU,aAAaa,KAAMf,GAAS,SAAC,IAAa,KAAM,SAAC,IAAY,cAIlG,SAAC,IAAiB,CAACgB,SAAUtB,EAAMuB,iBAAe,EAACC,MAAOC,EAAAA,EAAaC,YAlBvD,CAClBC,aAAc,MACdC,SAAU,OACVC,WAAY,OACZC,OAAQ,GAc0F,SAC7F7B,MAIT,C,4MCHA,EAnDiB,WACf,MAAoCC,EAAAA,GAAAA,aAAoB,eAAjDC,EAAU,KAAEC,EAAa,KAChC,GAAgCC,EAAAA,EAAAA,UAAS,QAAO,eAAzC0B,EAAQ,KAAEC,EAAW,KAC5B,GAA4B3B,EAAAA,EAAAA,WAAS,GAAM,eAApCC,EAAM,KAAEC,EAAS,KA2BxB,OACE,2BACGH,GACD,UAAC,UAAW,CAAC6B,SAAO,aAClB,SAAC,IAAK,CACJT,MAAO,CACLU,MAAO,qBAETC,aAAcJ,EACdK,SAAU,SAACC,GAAC,OAAKL,EAAYK,EAAEC,OAAOC,MAAM,KAE9C,SAAC,IAAO,CAAC9B,MAAM,eAAI,UACjB,SAAC,EAAAC,gBAAe,CAACC,KAAMoB,EAAUnB,OAtC1B,SAACD,EAAME,GACfF,EAODE,GACFN,GAAU,GACVJ,EAAWW,QAAQ,CACjBC,QAAS,iCACTC,SAAU,EACVC,QAAS,WACPV,GAAU,EACZ,MAGFA,GAAU,GACVJ,EAAWe,MAAM,CACfH,QAAS,iCACTC,SAAU,KAnBZb,EAAWgB,QAAQ,CACjBJ,QAAS,yDACTC,SAAU,GAoBhB,EAcwD,UAC9C,SAAC,KAAM,CAACR,UAAU,aAAaa,KAAMf,GAAS,SAACkC,EAAA,EAAa,KAAM,SAACC,EAAA,EAAY,eAM3F,EChDQC,EAAUC,EAAAA,EAAAA,MAmBlB,EAjBiB,WACf,OACE,4BACE,SAACD,EAAK,UAAC,6BACP,SAACA,EAAK,CAACE,MAAO,EAAGpB,MAAO,CAAEqB,UAAW,SAAU,SAAC,wBAChD,SAACC,EAAA,EAAe,CAAC9C,KAAK,KAAI,SACvB,gDAEH,SAAC0C,EAAK,CAACE,MAAO,EAAGpB,MAAO,CAAEqB,UAAW,SAAU,SAAC,wBAChD,SAAC,EAAQ,KACT,SAACH,EAAK,CAACE,MAAO,EAAGpB,MAAO,CAAEqB,UAAW,SAAU,SAAC,oCAChD,SAACC,EAAA,EAAe,CAAC9C,KAAK,MAAK,SCnBR,0jDDwBzB,C","sources":["components/CodeHighlighter.jsx","pages/pageCopy/CopyDemo.jsx","pages/pageCopy/PageCopy.jsx","pages/pageCopy/Codes.js"],"sourcesContent":["import { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Button, message, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\n\nconst CodeHighlighter = ({ lang = 'javascript', children = '' }) => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '缺乏待复制内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  const customStyle = {\n    borderRadius: '6px',\n    fontSize: '14px',\n    paddingTop: '22px',\n    margin: 0,\n  }\n\n  return (\n    <div className='relative'>\n      {contextHolder}\n      <div className='absolute right-1 top-1 flex items-center'>\n        <span className='text-zinc-400 mr-3'>{lang}</span>\n        <Tooltip title=\"复制代码\">\n          <CopyToClipboard text={children} onCopy={onCopy}>\n            <Button size=\"small\" className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </div>\n      <SyntaxHighlighter language={lang} showLineNumbers style={vscDarkPlus} customStyle={customStyle}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeHighlighter;\n","import { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { message, Button, Input, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\n\nconst CopyDemo = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [inputStr, setInputStr] = useState('demo');\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '请输入待复制内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  return (\n    <div>\n      {contextHolder}\n      <Input.Group compact>\n        <Input\n          style={{\n            width: 'calc(100% - 32px)',\n          }}\n          defaultValue={inputStr}\n          onChange={(e) => setInputStr(e.target.value)}\n        />\n        <Tooltip title=\"复制\">\n          <CopyToClipboard text={inputStr} onCopy={onCopy}>\n            <Button className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default CopyDemo;\n","import React from 'react';\nimport CodeHighlighter from '../../components/CodeHighlighter';\nimport { Typography } from 'antd';\nimport CopyDemo from './CopyDemo';\nimport { copyDemoCode } from './Codes';\n\nconst { Title } = Typography;\n\nconst PageCopy = () => {\n  return (\n    <div>\n      <Title>react-copy-to-clipboard</Title>\n      <Title level={2} style={{ marginTop: '0.5em' }}>安装：</Title>\n      <CodeHighlighter lang='sh'>\n        {'npm install --save react-copy-to-clipboard'}\n      </CodeHighlighter>\n      <Title level={2} style={{ marginTop: '0.5em' }}>例子：</Title>\n      <CopyDemo></CopyDemo>\n      <Title level={2} style={{ marginTop: '0.5em' }}>例子代码：</Title>\n      <CodeHighlighter lang='jsx'>\n        {copyDemoCode}\n      </CodeHighlighter>\n    </div>\n  )\n};\nexport default PageCopy;\n","export const copyDemoCode = `import { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { message, Button, Input, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\n\nconst CopyDemo = () => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [inputStr, setInputStr] = useState('demo');\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '请输入内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  return (\n    <div>\n      {contextHolder}\n      <Input.Group compact>\n        <Input\n          style={{\n            width: 'calc(100% - 32px)',\n          }}\n          defaultValue={inputStr}\n          onChange={(e) => setInputStr(e.target.value)}\n        />\n        <Tooltip title=\"复制\">\n          <CopyToClipboard text={inputStr} onCopy={onCopy}>\n            <Button className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </Input.Group>\n    </div>\n  );\n};\n\nexport default CopyDemo;`\n"],"names":["lang","children","message","messageApi","contextHolder","useState","copied","setCopied","className","title","CopyToClipboard","text","onCopy","result","success","content","duration","onClose","error","warning","size","icon","language","showLineNumbers","style","vscDarkPlus","customStyle","borderRadius","fontSize","paddingTop","margin","inputStr","setInputStr","compact","width","defaultValue","onChange","e","target","value","CheckOutlined","CopyOutlined","Title","Typography","level","marginTop","CodeHighlighter"],"sourceRoot":""}