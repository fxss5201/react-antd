{"version":3,"file":"static/js/665.24d5f36f.chunk.js","mappings":"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","sources":["components/CodeHighlighter.jsx","pages/pageRecommendation/pageCode/CodeDemo.jsx","pages/pageRecommendation/pageCode/PageCode.jsx","pages/pageRecommendation/pageCode/Codes.js"],"sourcesContent":["import { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Button, message, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\nimport classNames from 'classnames';\n\nconst CodeHighlighter = ({ lang='javascript', children='', className='' }) => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '缺乏待复制内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  const customStyle = {\n    borderRadius: '6px',\n    fontSize: '14px',\n    paddingTop: '22px',\n    margin: 0,\n  }\n\n  return (\n    <div className={classNames('relative', className)}>\n      {contextHolder}\n      <div className='absolute right-1 top-1 flex items-center'>\n        <span className='text-zinc-400 mr-3'>{lang}</span>\n        <Tooltip title=\"复制代码\">\n          <CopyToClipboard text={children} onCopy={onCopy}>\n            <Button size=\"small\" className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </div>\n      <SyntaxHighlighter language={lang} showLineNumbers style={vscDarkPlus} customStyle={customStyle}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeHighlighter;\n","import React from 'react';\nimport CodeHighlighter from '../../../components/CodeHighlighter';\n\nconst codeString = `import React from \"react\";\nimport uniquePropHOC from \"./lib/unique-prop-hoc\";\n\n// this comment is here to demonstrate an extremely long line length, well beyond what you should probably allow in your own code, though sometimes you'll be highlighting code you can't refactor, which is unfortunate but should be handled gracefully\n\nclass Expire extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { component: props.children }\n    }\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                component: null\n            });\n        }, this.props.time || this.props.seconds * 1000);\n    }\n    render() {\n        return this.state.component;\n    }\n}\n\nexport default uniquePropHOC([\"time\", \"seconds\"])(Expire);`;\n\nconst CodeDemo = () => {\n  return (\n    <CodeHighlighter lang='jsx'>\n      {codeString}\n    </CodeHighlighter>\n  )\n};\n\nexport default CodeDemo;\n","import React from 'react';\nimport CodeHighlighter from '../../../components/CodeHighlighter';\nimport { Typography, theme } from 'antd';\nimport CodeDemo from './CodeDemo';\nimport { Codes } from './Codes';\n\nconst { useToken } = theme;\nconst { Title, Text, Link  } = Typography;\n\n\nconst PageCode = () => {\n  const { token } = useToken();\n  const { colorPrimary } = token;\n  return (\n    <div>\n      <Title><a href=\"https://github.com/react-syntax-highlighter/react-syntax-highlighter\" target=\"_blank\" rel=\"noreferrer\" style={{color: colorPrimary}}>react-syntax-highlighter</a></Title>\n      <Text>\n        <Link href=\"https://react-syntax-highlighter.github.io/react-syntax-highlighter/demo/\" target=\"_blank\" style={{color: colorPrimary}}>官方实例</Link>\n      </Text>\n      <Title level={2} style={{ marginTop: '0.5em' }}>安装：</Title>\n      <CodeHighlighter lang='sh'>\n        {'npm install react-syntax-highlighter --save'}\n      </CodeHighlighter>\n      <Title level={2} style={{ marginTop: '0.5em' }}>例子：</Title>\n      <CodeDemo></CodeDemo>\n      <Title level={2} style={{ marginTop: '0.5em' }}>代码渲染封装组件：</Title>\n      <CodeHighlighter lang='jsx'>\n        {Codes}\n      </CodeHighlighter>\n    </div>\n  )\n};\nexport default PageCode;","export const Codes = `import { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Button, message, Tooltip } from 'antd';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\n\nconst CodeHighlighter = ({ lang = 'javascript', children = '' }) => {\n  const [messageApi, contextHolder] = message.useMessage();\n  const [copied, setCopied] = useState(false);\n  const onCopy = (text, result) => {\n    if (!text) {\n      messageApi.warning({\n        content: '缺乏待复制内容！',\n        duration: 2,\n      });\n      return;\n    }\n    if (result) {\n      setCopied(true);\n      messageApi.success({\n        content: '复制成功！',\n        duration: 2,\n        onClose: () => {\n          setCopied(false);\n        }\n      });\n    } else {\n      setCopied(false);\n      messageApi.error({\n        content: '复制失败！',\n        duration: 2,\n      });\n    }\n  };\n\n  const customStyle = {\n    borderRadius: '6px',\n    fontSize: '14px',\n    paddingTop: '22px',\n    margin: 0,\n  }\n\n  return (\n    <div className='relative'>\n      {contextHolder}\n      <div className='absolute right-1 top-1 flex items-center'>\n        <span className='text-zinc-400 mr-3'>{lang}</span>\n        <Tooltip title=\"复制代码\">\n          <CopyToClipboard text={children} onCopy={onCopy}>\n            <Button size=\"small\" className='opacity-80' icon={copied ? <CheckOutlined /> : <CopyOutlined /> }  />\n          </CopyToClipboard>\n        </Tooltip>\n      </div>\n      <SyntaxHighlighter language={lang} wrapLongLines showLineNumbers style={vscDarkPlus} customStyle={customStyle}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nexport default CodeHighlighter;`"],"names":["_ref","_ref$lang","lang","_ref$children","children","_ref$className","className","_message$useMessage","message","_message$useMessage2","_slicedToArray","messageApi","contextHolder","_useState","useState","_useState2","copied","setCopied","_jsxs","classNames","_jsx","Tooltip","title","CopyToClipboard","text","onCopy","result","success","content","duration","onClose","error","warning","Button","size","icon","CheckOutlined","CopyOutlined","SyntaxHighlighter","language","showLineNumbers","style","vscDarkPlus","customStyle","borderRadius","fontSize","paddingTop","margin","CodeHighlighter","useToken","theme","Title","Typography","Text","Link","colorPrimary","token","href","target","rel","color","level","marginTop","CodeDemo"],"sourceRoot":""}